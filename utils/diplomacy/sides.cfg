# =========================
# Pairwise diplomacy utils
# =========================

#define ANW__DIP_RUNTIME_HELPERS
    [lua]
        code=<<
            -- Install once; safe to call many times.
            if not wesnoth._anw_side then
                function wesnoth._anw_side(i)
                    if wesnoth.sides and wesnoth.sides.get then return wesnoth.sides.get(i) end
                    if wesnoth.sides then return wesnoth.sides[i] end
                    if wesnoth.get_side then return wesnoth.get_side(i) end
                end
                function wesnoth._anw_tok(a,b)
                    if a>b then a,b=b,a end
                    return ("p%02d_%02d"):format(a,b)
                end
                function wesnoth._anw_rm_tok(s, T)
                    local kept, removed = {}, false
                    for t in string.gmatch(s.team_name or "", "[^,]+") do
                        if t ~= "" and t ~= T then
                            kept[#kept+1] = t
                        elseif t == T then
                            removed = true
                        end
                    end
                    s.team_name = table.concat(kept, ",")
                    return removed
                end
                function wesnoth._anw_add_tok(s, T)
                    local present = false
                    for t in string.gmatch(s.team_name or "", "[^,]+") do
                        if t == T then present = true break end
                    end
                    if not present then
                        local base = s.team_name or ""
                        s.team_name = (base ~= "" and (base .. "," .. T)) or T
                    end
                    return not present
                end
            end
        >>
    [/lua]
#enddef

#define DECLARE_WAR I J
    {ANW__DIP_RUNTIME_HELPERS}
    [lua]
        code=<<
            local i, j = tonumber("{I}"), tonumber("{J}")
            if not (i and j) then return end
            local side, tok = wesnoth._anw_side, wesnoth._anw_tok
            local s1, s2 = side(i), side(j); if not (s1 and s2) then return end
            local T = tok(i,j)
            wesnoth._anw_rm_tok(s1, T)
            wesnoth._anw_rm_tok(s2, T)
            -- Log to stderr so you can verify even at prestart.
            if wesnoth.log then wesnoth.log("info", ("DECLARE_WAR %d<->%d (removed %s)"):format(i,j,T)) end
        >>
    [/lua]
#enddef

#define DECLARE_PEACE I J
    {ANW__DIP_RUNTIME_HELPERS}
    [lua]
        code=<<
            local i, j = tonumber("{I}"), tonumber("{J}")
            if not (i and j) then return end
            local side, tok = wesnoth._anw_side, wesnoth._anw_tok
            local s1, s2 = side(i), side(j); if not (s1 and s2) then return end
            local T = tok(i,j)
            wesnoth._anw_add_tok(s1, T)
            wesnoth._anw_add_tok(s2, T)
            if wesnoth.log then wesnoth.log("info", ("DECLARE_PEACE %d<->%d (added %s)"):format(i,j,T)) end
        >>
    [/lua]
#enddef

# Handy dump if you want to see the strings at any moment
#define DUMP_TEAMS WHEN
[event]
    name={WHEN}
    [lua]
        code=<<
            local function side(i)
                if wesnoth.sides and wesnoth.sides.get then return wesnoth.sides.get(i) end
                if wesnoth.sides then return wesnoth.sides[i] end
                if wesnoth.get_side then return wesnoth.get_side(i) end
            end
            local i, lines = 1, {}
            while true do
                local s = side(i); if not s then break end
                lines[#lines+1] = ("Side %d team_name = %s"):format(i, s.team_name or "")
                i = i + 1
            end
            wesnoth.message("Teams", table.concat(lines, "\n"))
        >>
    [/lua]
[/event]
#enddef
